using System.Text;
using System.IO;
using UnityEditor;

namespace SceneUtil
{
    public class SceneEditorUtil : Editor
    {

        [InitializeOnLoadMethod]
        [MenuItem("Scenes/Refresh")]
        public static void Refresh()
        {
            var code = CreateSceneUtilScript();
            SaveFile(code, Path.Combine(GetPath(), "SceneUtilAutoGenerated.cs"));
            AssetDatabase.Refresh();
        }

        private static string GetPath()
        {
            var a = AssetDatabase.FindAssets(string.Format("t:Script {0}", "SceneEditorUtil"));
            var filePath = AssetDatabase.GUIDToAssetPath(a[0]);
            var pathArray = filePath.Split('/');
            filePath = string.Empty;

            for (int i = 0; i < pathArray.Length - 1; i++)
			{
				filePath += string.Format("{0}/", pathArray[i]);
			}

            return filePath;
        }

        private static StringBuilder CreateSceneUtilScript()
        {
            var consideredScenes = EditorBuildSettingsScene.GetActiveSceneList(EditorBuildSettings.scenes);
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// This is Auto Generated Script so any modification will overwrite\n");
            sb.AppendLine("using UnityEditor;\n");
            sb.AppendLine("public class SceneUtilAutoGenerated");
            sb.AppendLine("{");

            foreach (var scene in consideredScenes)
            {
                GenerateSceneMethod(ref sb, scene, 4);
            }

            sb.AppendLine("}");
            return sb;
        }

        private static void GenerateSceneMethod(ref StringBuilder methodSb, string scenePath, uint appendLevel)
        {

            var sceneArray = scenePath.Split('/');

            // Neg sceneName with -6 (which point to . in string index) to satisfy offset so
            // you'll get scene name without .unity extension
			var sceneName = sceneArray[sceneArray.Length - 1].Substring(0, sceneArray[sceneArray.Length - 1].Length - 6);

            AutoGenerateMethodDefinitionStructure(ref methodSb, sceneName, appendLevel);
            AutoGenerateOpeningCurlyBraces(ref methodSb, appendLevel);
            AutoIndent(ref methodSb, appendLevel + 4);
            methodSb.Append(string.Format("var scenePath = \"{0}\";\n", scenePath));
            AutoIndent(ref methodSb, appendLevel + 4);
            methodSb.Append(string.Format("{0}.{1}.OpenScene(scenePath);\n", typeof(SceneEditorUtil).Namespace, "SceneEditorUtil"));
            AutoGenerateCloseingCurlyBraces(ref methodSb, appendLevel);

        }

        private static void AutoGenerateMethodDefinitionStructure(
                ref StringBuilder sb, string sceneName, uint appendLevel)
        {
            AutoIndent(ref sb, appendLevel);
            // sb.Append($"[MenuItem(\"Scenes/{sceneName}\")]\n");
            sb.Append(string.Format("[MenuItem(\"Scenes/{0}\")]\n", sceneName));
            AutoIndent(ref sb, appendLevel);
            // sb.Append($"public static void Generated{sceneName}Method()\n");
            sb.Append(string.Format("public static void Generated{0}Method()\n", sceneName));
        }

        private static void AutoIndent(ref StringBuilder sb, uint appendLevel)
        {
            for (int i = 0; i < appendLevel; i++)
                sb.Append(" ");
        }

        private static void AutoGenerateOpeningCurlyBraces(ref StringBuilder sb, uint appendLevel)
        {
            AutoIndent(ref sb, appendLevel);
            sb.Append("{\n");
        }

        private static void AutoGenerateCloseingCurlyBraces(ref StringBuilder sb, uint appendLevel)
        {
            AutoIndent(ref sb, appendLevel);
            sb.Append("}\n\n");
        }

        private static void SaveFile(StringBuilder code, string path)
        {
            File.WriteAllText(path, code.ToString());
        }

        public static void OpenScene(string scenePath)
        {
            var change = UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
			if (!change)
				return;
            UnityEditor.SceneManagement.EditorSceneManager.OpenScene(scenePath);
        }
    }
}
